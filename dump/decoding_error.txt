[{
	access: []
	doc: null
	kind: FProp(get, never, TPath({
		name: T
		pack: []
		params: []
		sub: null
	}), null)
	meta: []
	name: state
	pos: #pos
}, {
	access: []
	doc: null
	kind: FProp(get, never, TFunction([TNamed(state, TPath({
		name: T
		pack: []
		params: []
		sub: null
	}))], TPath({
		name: VNode
		pack: []
		params: [TPType(TPath({
			name: Node
			pack: []
			params: []
			sub: null
		}))]
		sub: null
	})), null)
	meta: []
	name: build
	pos: #pos
}, {
	access: []
	doc: null
	kind: FVar(TFunction([], TPath({
		name: Void
		pack: []
		params: []
		sub: null
	})), null)
	meta: []
	name: unsub
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EConst(CIdent(unsub))
					pos: #pos
				}, {
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(state))
							pos: #pos
						}, __subscribe)
						pos: #pos
					}, [{
						expr: EConst(CIdent(__requestUpdate))
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: subscribe
	pos: #pos
}, {
	access: []
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EIf({
					expr: EBinop(OpNotEq, {
						expr: EConst(CIdent(unsub))
						pos: #pos
					}, {
						expr: EConst(CIdent(null))
						pos: #pos
					})
					pos: #pos
				}, {
					expr: ECall({
						expr: EConst(CIdent(unsub))
						pos: #pos
					}, [])
					pos: #pos
				}, null)
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: []
	name: unsubscribe
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: []
			name: context
			opt: false
			type: TPath({
				name: Context
				pack: []
				params: [TPType(TPath({
					name: Node
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: ECall({
						expr: EConst(CIdent(build))
						pos: #pos
					}, [{
						expr: EConst(CIdent(state))
						pos: #pos
					}])
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: TPath({
			name: VNode
			pack: []
			params: [TPType(TPath({
				name: Node
				pack: []
				params: []
				sub: null
			}))]
			sub: null
		})
	})
	meta: []
	name: render
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EField({
					expr: EConst(CIdent(__props))
					pos: #pos
				}, state)
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: get_state
	pos: #pos
}, {
	access: null
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EReturn({
				expr: EField({
					expr: EConst(CIdent(__props))
					pos: #pos
				}, build)
				pos: #pos
			})
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: get_build
	pos: #pos
}, {
	access: [APublic, AStatic]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: props
			opt: null
			type: TAnonymous([{
				access: [APublic]
				doc: null
				kind: FVar(TPath({
					name: T
					pack: []
					params: []
					sub: null
				}), null)
				meta: []
				name: state
				pos: #pos
			}, {
				access: [APublic]
				doc: null
				kind: FVar(TFunction([TNamed(state, TPath({
					name: T
					pack: []
					params: []
					sub: null
				}))], TPath({
					name: VNode
					pack: []
					params: [TPType(TPath({
						name: Node
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				})), null)
				meta: []
				name: build
				pos: #pos
			}])
			value: null
		}, {
			meta: null
			name: context
			opt: null
			type: TPath({
				name: Context
				pack: [blok, internal]
				params: [TPType(null <- expected enum value)]
				sub: null
			})
			value: null
		}, {
			meta: null
			name: parent
			opt: null
			type: TPath({
				name: Component
				pack: [blok, internal]
				params: [TPType(null <- expected enum value)]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EVars([{
					expr: {
						expr: ENew({
							name: StateSubscriber
							pack: [blok, internal]
							params: null
							sub: null
						}, [{
							expr: EConst(CIdent(props))
							pos: #pos
						}, {
							expr: EConst(CIdent(context))
							pos: #pos
						}, {
							expr: EConst(CIdent(parent))
							pos: #pos
						}])
						pos: #pos
					}
					isFinal: false
					name: comp
					type: null
				}])
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(comp))
						pos: #pos
					}, __inserted)
					pos: #pos
				}, {
					expr: EConst(CIdent(true))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EReturn({
					expr: EConst(CIdent(comp))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: [{
			constraints: [TPath({
				name: State
				pack: [blok, internal]
				params: [TPType(TPath({
					name: Node
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})]
			meta: null
			name: T
			params: null
		}, {
			constraints: []
			meta: null
			name: Node
			params: null
		}]
		ret: TPath({
			name: Component
			pack: [blok, internal]
			params: [TPType(null <- expected enum value)]
			sub: null
		})
	})
	meta: null
	name: __create
	pos: #pos
}, {
	access: [AStatic, APublic, AInline]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: props
			opt: null
			type: TAnonymous([{
				access: [APublic]
				doc: null
				kind: FVar(TPath({
					name: T
					pack: []
					params: []
					sub: null
				}), null)
				meta: []
				name: state
				pos: #pos
			}, {
				access: [APublic]
				doc: null
				kind: FVar(TFunction([TNamed(state, TPath({
					name: T
					pack: []
					params: []
					sub: null
				}))], TPath({
					name: VNode
					pack: []
					params: [TPType(TPath({
						name: Node
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				})), null)
				meta: []
				name: build
				pos: #pos
			}])
			value: null
		}, {
			meta: null
			name: key
			opt: true
			type: TPath({
				name: Null
				pack: []
				params: [TPType(TPath({
					name: Key
					pack: [blok, internal]
					params: []
					sub: null
				}))]
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EReturn({
				expr: ECall({
					expr: EField({
						expr: EField({
							expr: EField({
								expr: EConst(CIdent(blok))
								pos: #pos
							}, internal)
							pos: #pos
						}, VNode)
						pos: #pos
					}, VComponent)
					pos: #pos
				}, [{
					expr: EField({
						expr: EField({
							expr: EConst(CIdent(blok))
							pos: #pos
						}, internal)
						pos: #pos
					}, StateSubscriber)
					pos: #pos
				}, {
					expr: EConst(CIdent(props))
					pos: #pos
				}, {
					expr: EConst(CIdent(key))
					pos: #pos
				}])
				pos: #pos
			})
			pos: #pos
		}
		params: [{
			constraints: [TPath({
				name: State
				pack: [blok, internal]
				params: [TPType(TPath({
					name: Node
					pack: []
					params: []
					sub: null
				}))]
				sub: null
			})]
			meta: null
			name: T
			params: null
		}, {
			constraints: []
			meta: null
			name: Node
			params: null
		}]
		ret: TPath({
			name: VNode
			pack: [blok, internal]
			params: [TPType(null <- expected enum value)]
			sub: null
		})
	})
	meta: null
	name: node
	pos: #pos
}, {
	access: null
	doc: null
	kind: FVar(TAnonymous([{
		access: [APublic]
		doc: null
		kind: FVar(TPath({
			name: T
			pack: []
			params: []
			sub: null
		}), null)
		meta: []
		name: state
		pos: #pos
	}, {
		access: [APublic]
		doc: null
		kind: FVar(TFunction([TNamed(state, TPath({
			name: T
			pack: []
			params: []
			sub: null
		}))], TPath({
			name: VNode
			pack: []
			params: [TPType(TPath({
				name: Node
				pack: []
				params: []
				sub: null
			}))]
			sub: null
		})), null)
		meta: []
		name: build
		pos: #pos
	}]), null)
	meta: null
	name: __props
	pos: #pos
}, {
	access: [APublic]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: __incomingProps
			opt: false
			type: TAnonymous([{
				access: [APublic]
				doc: null
				kind: FVar(TPath({
					name: T
					pack: []
					params: []
					sub: null
				}), null)
				meta: []
				name: state
				pos: #pos
			}, {
				access: [APublic]
				doc: null
				kind: FVar(TFunction([TNamed(state, TPath({
					name: T
					pack: []
					params: []
					sub: null
				}))], TPath({
					name: VNode
					pack: []
					params: [TPType(TPath({
						name: Node
						pack: []
						params: []
						sub: null
					}))]
					sub: null
				})), null)
				meta: []
				name: build
				pos: #pos
			}])
			value: null
		}, {
			meta: null
			name: __context
			opt: false
			type: null
			value: null
		}, {
			meta: null
			name: __parent
			opt: false
			type: null
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __context)
					pos: #pos
				}, {
					expr: EConst(CIdent(__context))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __parent)
					pos: #pos
				}, {
					expr: EConst(CIdent(__parent))
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBinop(OpAssign, {
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __props)
					pos: #pos
				}, {
					expr: EObjectDecl([{
						expr: {
							expr: EField({
								expr: EConst(CIdent(__incomingProps))
								pos: #pos
							}, state)
							pos: #pos
						}
						field: state
						quotes: null
					}, {
						expr: {
							expr: EField({
								expr: EConst(CIdent(__incomingProps))
								pos: #pos
							}, build)
							pos: #pos
						}
						field: build
						quotes: null
					}])
					pos: #pos
				})
				pos: #pos
			}, {
				expr: EBlock([{
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, subscribe)
						pos: #pos
					}, [])
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EConst(CIdent(__render))
					pos: #pos
				}, [{
					expr: EField({
						expr: EConst(CIdent(this))
						pos: #pos
					}, __context)
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: null
	name: new
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: __incomingProps
			opt: false
			type: TPath({
				name: Dynamic
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EBlock([{
					expr: EBlock([{
						expr: EIf({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(Reflect))
									pos: #pos
								}, hasField)
								pos: #pos
							}, [{
								expr: EConst(CIdent(__incomingProps))
								pos: #pos
							}, {
								expr: EConst(CString(state, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EBlock([{
								expr: ESwitch({
									expr: EArrayDecl([{
										expr: EField({
											expr: EConst(CIdent(__props))
											pos: #pos
										}, state)
										pos: #pos
									}, {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(Reflect))
												pos: #pos
											}, field)
											pos: #pos
										}, [{
											expr: EConst(CIdent(__incomingProps))
											pos: #pos
										}, {
											expr: EConst(CString(state, DoubleQuotes))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}, [{
									expr: null
									guard: {
										expr: EBinop(OpEq, {
											expr: EConst(CIdent(a))
											pos: #pos
										}, {
											expr: EConst(CIdent(b))
											pos: #pos
										})
										pos: #pos
									}
									values: [{
										expr: EArrayDecl([{
											expr: EConst(CIdent(a))
											pos: #pos
										}, {
											expr: EConst(CIdent(b))
											pos: #pos
										}])
										pos: #pos
									}]
								}, {
									expr: {
										expr: EBlock([{
											expr: EBinop(OpAssign, {
												expr: EField({
													expr: EConst(CIdent(__props))
													pos: #pos
												}, state)
												pos: #pos
											}, {
												expr: EConst(CIdent(value))
												pos: #pos
											})
											pos: #pos
										}])
										pos: #pos
									}
									guard: null
									values: [{
										expr: EArrayDecl([{
											expr: EConst(CIdent(current))
											pos: #pos
										}, {
											expr: EConst(CIdent(value))
											pos: #pos
										}])
										pos: #pos
									}]
								}], null)
								pos: #pos
							}])
							pos: #pos
						}, null)
						pos: #pos
					}])
					pos: #pos
				}, {
					expr: EBlock([{
						expr: EIf({
							expr: ECall({
								expr: EField({
									expr: EConst(CIdent(Reflect))
									pos: #pos
								}, hasField)
								pos: #pos
							}, [{
								expr: EConst(CIdent(__incomingProps))
								pos: #pos
							}, {
								expr: EConst(CString(build, DoubleQuotes))
								pos: #pos
							}])
							pos: #pos
						}, {
							expr: EBlock([{
								expr: ESwitch({
									expr: EArrayDecl([{
										expr: EField({
											expr: EConst(CIdent(__props))
											pos: #pos
										}, build)
										pos: #pos
									}, {
										expr: ECall({
											expr: EField({
												expr: EConst(CIdent(Reflect))
												pos: #pos
											}, field)
											pos: #pos
										}, [{
											expr: EConst(CIdent(__incomingProps))
											pos: #pos
										}, {
											expr: EConst(CString(build, DoubleQuotes))
											pos: #pos
										}])
										pos: #pos
									}])
									pos: #pos
								}, [{
									expr: null
									guard: {
										expr: EBinop(OpEq, {
											expr: EConst(CIdent(a))
											pos: #pos
										}, {
											expr: EConst(CIdent(b))
											pos: #pos
										})
										pos: #pos
									}
									values: [{
										expr: EArrayDecl([{
											expr: EConst(CIdent(a))
											pos: #pos
										}, {
											expr: EConst(CIdent(b))
											pos: #pos
										}])
										pos: #pos
									}]
								}, {
									expr: {
										expr: EBlock([{
											expr: EBinop(OpAssign, {
												expr: EField({
													expr: EConst(CIdent(__props))
													pos: #pos
												}, build)
												pos: #pos
											}, {
												expr: EConst(CIdent(value))
												pos: #pos
											})
											pos: #pos
										}])
										pos: #pos
									}
									guard: null
									values: [{
										expr: EArrayDecl([{
											expr: EConst(CIdent(current))
											pos: #pos
										}, {
											expr: EConst(CIdent(value))
											pos: #pos
										}])
										pos: #pos
									}]
								}], null)
								pos: #pos
							}])
							pos: #pos
						}, null)
						pos: #pos
					}])
					pos: #pos
				}])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __updateProps
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: [{
			meta: null
			name: __incomingProps
			opt: false
			type: TPath({
				name: Dynamic
				pack: []
				params: []
				sub: null
			})
			value: null
		}]
		expr: {
			expr: EBlock([{
				expr: EReturn({
					expr: EConst(CIdent(true))
					pos: #pos
				})
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __shouldUpdate
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EConst(CIdent(null))
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __registerEffects
	pos: #pos
}, {
	access: [AOverride]
	doc: null
	kind: FFun({
		args: []
		expr: {
			expr: EBlock([{
				expr: EBlock([{
					expr: ECall({
						expr: EField({
							expr: EConst(CIdent(this))
							pos: #pos
						}, unsubscribe)
						pos: #pos
					}, [])
					pos: #pos
				}])
				pos: #pos
			}, {
				expr: ECall({
					expr: EField({
						expr: EConst(CIdent(super))
						pos: #pos
					}, __dispose)
					pos: #pos
				}, [])
				pos: #pos
			}])
			pos: #pos
		}
		params: []
		ret: null
	})
	meta: [{
		name: :noCompletion
		params: []
		pos: #pos
	}]
	name: __dispose
	pos: #pos
}]
line 259: expected enum value
line 270: expected enum value
line 346: expected enum value
line 472: expected enum value